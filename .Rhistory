library(matrixStats)
library(genefilter)
library(openxlsx)
#library(devtools)
raw_data_dir <- tempdir()
if (!dir.exists(raw_data_dir)) {
dir.create(raw_data_dir)
}
anno_AE <- getAE("E-GEOD-39621", path = raw_data_dir, type = "raw")
sdrf_location <- file.path(raw_data_dir, "E-GEOD-396217.sdrf.txt")
SDRF <- read.delim(sdrf_location)
rownames(SDRF) <- SDRF$Array.Data.File
SDRF <- AnnotatedDataFrame(SDRF)
raw_data <- oligo::read.celfiles(filenames = file.path(raw_data_dir,
SDRF$Array.Data.File),
verbose = FALSE, phenoData = SDRF)
stopifnot(validObject(raw_data))
View(anno_AE)
raw_data <- oligo::read.celfiles(filenames = file.path(raw_data_dir,
SDRF$Array.Data.File),
verbose = FALSE, phenoData = SDRF)
stopifnot(validObject(raw_data))
#General Bioconductor packages
library(Biobase)
library(oligoClasses)
#Annotation and data import packages
library(ArrayExpress)
library(pd.hugene.1.0.st.v1)
library(hugene10sttranscriptcluster.db)
#Quality control and pre-processing packages
library(oligo)
library(arrayQualityMetrics)
#Analysis and statistics packages
library(limma)
library(topGO)
library(ReactomePA)
library(clusterProfiler)
#Plotting and color options packages
library(gplots)
library(ggplot2)
library(geneplotter)
library(RColorBrewer)
library(pheatmap)
library(enrichplot)
#Formatting/documentation packages
#library(rmarkdown)
#library(BiocStyle)
library(dplyr)
library(tidyr)
#Helpers:
library(stringr)
library(matrixStats)
library(genefilter)
library(openxlsx)
#library(devtools)
raw_data_dir <- tempdir()
if (!dir.exists(raw_data_dir)) {
dir.create(raw_data_dir)
}
anno_AE <- getAE("E-GEOD-39621", path = raw_data_dir, type = "raw")
sdrf_location <- file.path(raw_data_dir, "E-GEOD-396217.sdrf.txt")
SDRF <- read.delim(sdrf_location)
rownames(SDRF) <- SDRF$Array.Data.File
SDRF <- AnnotatedDataFrame(SDRF)
raw_data <- oligo::read.celfiles(filenames = file.path(raw_data_dir,
SDRF$Array.Data.File),
verbose = FALSE, phenoData = SDRF)
stopifnot(validObject(raw_data))
#General Bioconductor packages
library(Biobase)
library(oligoClasses)
#Annotation and data import packages
library(ArrayExpress)
library(pd.hugene.1.0.st.v1)
library(hugene10sttranscriptcluster.db)
#Quality control and pre-processing packages
library(oligo)
library(arrayQualityMetrics)
#Analysis and statistics packages
library(limma)
library(topGO)
library(ReactomePA)
library(clusterProfiler)
#Plotting and color options packages
library(gplots)
library(ggplot2)
library(geneplotter)
library(RColorBrewer)
library(pheatmap)
library(enrichplot)
#Formatting/documentation packages
#library(rmarkdown)
#library(BiocStyle)
library(dplyr)
library(tidyr)
#Helpers:
library(stringr)
library(matrixStats)
library(genefilter)
library(openxlsx)
#library(devtools)
anno_AE <- getAE("E-GEOD-39621", path = raw_data_dir, type = "raw")
ls
source("r.NormOldStab5.txt")
setwd C:\Users\Valls-testedDX\Desktop\NEUROGNOS - TESTED\Normfinder
setwd Users\Valls-testedDX\Desktop\NEUROGNOS - TESTED\Normfinder
setwd 'Users\Valls-testedDX\Desktop\NEUROGNOS - TESTED\Normfinder'
BiocManager::install("edgeR")
BiocManager::install("topGO")
df <- read.csv2("C:\Users\Valls-testedDX\Desktop\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv")
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv")
?read.csv2
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = ",")
View(df)
df.columns
columns(df)
column(df)
colnames(df)
unique.wells <- df["Well.Position"].unique()
unique.wells <- unique(df["Well.Position"])
unique.wells <- list(unique(df["Well.Position"]))
for (well in unique.wells) {
df[df["Well.Position"] == well]
}
df[which(df$Well.Position==well)]
############ IMPORT QS FILE #######################
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = ",")
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- list(unique(df["Well.Position"]))
for (well in unique.wells) {
df[which(df$Well.Position==well)]
}
which(df$Well.Position == well)
unique.wells <- list(unique(df["Well.Position"]))
for (i in unique.wells) {
df[which(df$Well.Position == i)]
}
for (i in unique.wells) {
print(i)
print("next")
}
############ IMPORT QS FILE #######################
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = ",")
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- list(unique(df["Well.Position"]))
for (i in unique.wells) {
print(i)
print("next")
}
unique.wells <- unique(df["Well.Position"])
for (i in unique.wells) {
print(i)
print("next")
}
for(i in range(1:10)){
print(i)
print(next)
}
for(i in range(10)){
print(i)
print(next)
}
for(i in c(1,2,3)){
print(i)
print(next)
}
for(i in c(1,2,3)){
print(i)
print("next")
}
a <- c(1,2,3)
typeof(a)
typeof(df)
typeof(unique.wells)
for(i in unique.wells) {
print(i)
}
for(i in unique.wells) {
print(i)
print("next")
}
for(i in unique.wells) {
print(i)
print("next")
}
View(unique.wells)
for(i in unique(df["Well.Position"])) {
print(i)
print("next")
}
unique(df["Well.Position"])[1]
unique(df["Well.Position"])[1,1]
type(unique(df["Well.Position"]))
typeof(unique(df["Well.Position"]))
unique.wells <- unlist(unique(df["Well.Position"]))
for(i in unique.wells) {
print(i)
print("next")
}
for(i in unique.wells) {
df[where(df$Well.Position == i)])
}
for(i in unique.wells) {
df[where(df$Well.Position == i)]
}
for(i in unique.wells){
df[where(df$Well.Position == i)]
}
for(i in unique.wells){
df[when(df$Well.Position == i)]
}
for(i in unique.wells){
df[which(df$Well.Position == i)]
}
for(i in unique.wells){
print(i)
df.transitory <- df[which(df$Well.Position == i)]
}
df[which(df$Well.Position =="A1")]
?subset
for(i in unique.wells){
print(i)
df.transitory <- subset.data.frame(df, df$Well.Position == i)
}
View(df.transitory)
install.packages("qpcR")
library(qpcR)
??qpcR
?qpcR
for(i in unique.wells){
df.transitory <- subset.data.frame(df, df$Well.Position == i)
pcrfit(df.transitory,cyc = 1,fluo = 2)
}
for(i in unique.wells){
df.transitory <- subset.data.frame(df, df$Well.Position == i)
pcrfit(df.transitory , cyc = 3,fluo = 4)
}
df[, 4:7]  <- as.numeric(df[, 4:7])
df[, 4]
type(df[, 4])
df <- transform(df,X1_M1 = as.numeric(X1_M1))
for(i in unique.wells){
df.transitory <- subset.data.frame(df, df$Well.Position == i)
pcrfit(df.transitory , cyc = 3,fluo = 4)
}
plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
df.transitory <- subset.data.frame(df, df$Well.Position == "B1")
plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcrfit(df.transitory , cyc = 3,fluo = 4)
pcr.obj <- pcrfit(df.transitory , cyc = 3,fluo = 4)
sliwin(pcr.obj, wsize = 6, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
result <- sliwin(pcr.obj, wsize = 6, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
df_result <- data.frame("efficiency", "r2")
View(df_result)
df.result <- data.frame(efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
View(df.result)
df.result[nrow(df) + 1,] <- c(result$eff , result$rsq)
View(df.result)
result$eff
new.row <- list(efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
View(df)
View(df_result)
View(df.result)
library(qpcR)
############ IMPORT QS FILE #######################
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = "," , as)
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
}
df.transitory <- subset.data.frame(df, df$Well.Position == "B1")
plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3,fluo = 4)
result <- sliwin(pcr.obj, wsize = 6, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
library(qpcR)
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = "," , as)
df <- transform(df, X1_M1 = as.numeric(X1_M1))
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = "," , as)
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = "," , as)
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = ",")
df <- transform(df, X1_M1 = as.numeric(X1_M1))
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
df.transitory <- subset.data.frame(df, df$Well.Position == "B1")
plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3,fluo = 4)
result <- sliwin(pcr.obj, wsize = 6, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
View(df.result)
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
new.row <- list(well = "B1", efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3,fluo = 4)
result <- sliwin(pcr.obj, wsize = 6, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
View(df.result)
View(df.result)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3,fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
library(qpcR)
############ IMPORT QS FILE #######################
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = ",")
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3,fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
View(df.result)
library(qpcR)
library(readr)
############ IMPORT QS FILE & FORMAT #######################
# Input QS RAW and RESULTS .csv
mergefile <- "n61_Results_20211215 104838.csv"
df <- read_csv("n61_Raw Data_20211215 104838.csv", skip = 22)
# transform columns into valid names
colnames(df) <- make.names(colnames(df))
df <- transform(df, X1_M1 = as.numeric(X1_M1))
############ PROCESS DATA #######################
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
# get linearity window of each amplification curve.
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv(mergefile, skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
#write.csv(output, "n37_efficiency.csv" , sep = ",")
mergefile <- "n61_Results_20211215 104838.csv"
df <- read_csv("n61_Raw Data_20211215 104838.csv", skip = 22)
setwd("C:/Users/Valls-testedDX/Desktop/linReqPCR_FactorqPCR")
library(qpcR)
library(readr)
############ IMPORT QS FILE & FORMAT #######################
# Input QS RAW and RESULTS .csv
mergefile <- "n61_Results_20211215 104838.csv"
df <- read_csv("n61_Raw Data_20211215 104838.csv", skip = 22)
# transform columns into valid names
colnames(df) <- make.names(colnames(df))
df <- transform(df, X1_M1 = as.numeric(X1_M1))
############ PROCESS DATA #######################
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv(mergefile, skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
R.version
