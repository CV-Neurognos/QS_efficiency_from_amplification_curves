new.row <- list(well = "B1", efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3,fluo = 4)
result <- sliwin(pcr.obj, wsize = 6, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
View(df.result)
View(df.result)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3,fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
library(qpcR)
############ IMPORT QS FILE #######################
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = ",")
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3,fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
View(df.result)
write.csv2(df.result,"n34_efficiencies.csv")
wd
setwd("C:/Users/Valls-testedDX/Desktop/linReqPCR_FactorqPCR")
write.csv2(df.result,"n34_efficiencies.csv")
install.packages("RDML")
??RDML
??RDML
library(RDML)
library(RDML)
lc96 <- RDML$new("n34.rdml")
lc96 <- RDML$new("n34.rdml")
lc96 <- RDML$new("rdml_data.xml")
library(readr)
n34_results <- read_csv("n34_results.csv",
skip = 22)
View(n34_results)
library(readr)
n34_efficiencies <- read_delim("n34_efficiencies.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(n34_efficiencies)
?subset
colnames(n34_results)
n34_results[,"Well Position"]
n34_results[,c("Well Position","Target")]
n34_results_to_merge <- n34_results[,c("Well Position","Target")]
??merge.data.frame
?merge.data.frame
n34_output <- merge.data.frame(x = n34_efficiencies , y = n34_results_to_merge , by.x = "well" , by.y = "Well Position" )
View(n34_output)
library(qpcR)
############ IMPORT QS FILE #######################
df <- read.csv2("C:\\Users\\Valls-testedDX\\Desktop\\n34_14.07.21_Advance_miRNA_RT-PCR_Neurognos__Raw Data_20211213 102650.csv", skip = 22, sep = ",")
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv("n34_results.csv", skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
View(output)
write.csv2(output,"n34_efficiencies.csv", sep=",")
write.csv2(output,"n34_efficiency.csv", sep=",")
pwd
pwd()
library(qpcR)
df <- read.csv2("n37_Raw Data_20211214 151742", skip = 22, sep = ",")
library(readr)
df <- read_csv("n37_Raw Data_20211214 151742.csv", skip = 22)
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
colnames(df)
make.names(colnames(df))
colnames(df) <- make.names(colnames(df))
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv("n34_results.csv", skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
mergefile <- "n37_Results_20211214 151742.csv"
results_to_merge <- read_csv(merge_file, skip = 22)
results_to_merge <- read_csv(mergefile, skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
View(results_to_merge)
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
View(output)
write.csv2(output,"n37_efficiency.csv", sep=",")
library(qpcR)
library(readr)
############ IMPORT QS FILE #######################
mergefile <- "n38_Results_20211214 153128.csv"
df <- read_csv("n38_Raw Data_20211214 153128.csv", skip = 22)
colnames(df) <- make.names(colnames(df))
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv(mergefile, skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
write.csv(output, "38_efficiency.csv" , sep = ",")
library(qpcR)
library(readr)
############ IMPORT QS FILE #######################
mergefile <- "n39_Results_20211214 153527.csv"
df <- read_csv("n39_Raw Data_20211214 153527.csv", skip = 22)
colnames(df) <- make.names(colnames(df))
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv(mergefile, skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
#write.csv(output, "38_efficiency.csv" , sep = ",")
View(output)
write.csv(output, "39_efficiency.csv" , sep = ",")
library(qpcR)
library(readr)
############ IMPORT QS FILE #######################
mergefile <- "N40_Results_20211214 154038.csv"
df <- read_csv("N40_Raw Data_20211214 154038.csvv", skip = 22)
colnames(df) <- make.names(colnames(df))
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv(mergefile, skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
#write.csv(output, "39_efficiency.csv" , sep = ",")
############ IMPORT QS FILE #######################
mergefile <- "N40_Results_20211214 154038.csv"
df <- read_csv("N40_Raw Data_20211214 154038.csvv", skip = 22)
colnames(df) <- make.names(colnames(df))
df <- transform(df, X1_M1 = as.numeric(X1_M1))
library(qpcR)
library(readr)
############ IMPORT QS FILE #######################
mergefile <- "N40_Results_20211214 154038.csv"
df <- read_csv("N40_Raw Data_20211214 154038.csv", skip = 22)
colnames(df) <- make.names(colnames(df))
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv(mergefile, skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
#write.csv(output, "39_efficiency.csv" , sep = ",")
View(output)
write.csv(output, "n40_efficiency.csv" , sep = ",")
library(qpcR)
library(readr)
############ IMPORT QS FILE #######################
mergefile <- "n34_Results_20211214 154354.csv"
df <- read_csv("n34_Raw Data_20211214 154354.csv", skip = 22)
colnames(df) <- make.names(colnames(df))
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv(mergefile, skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
#write.csv(output, "n40_efficiency.csv" , sep = ",")
write.csv(output, "n40_efficiency.csv" , sep = ",")
library(qpcR)
library(readr)
############ IMPORT QS FILE #######################
mergefile <- "n37_Results_20211214 154916.csv"
df <- read_csv("n37_Raw Data_20211214 154916.csv", skip = 22)
colnames(df) <- make.names(colnames(df))
df <- transform(df, X1_M1 = as.numeric(X1_M1))
#1. select Wells(samples)
#2. sort fluorescence channel by cycle
unique.wells <- unlist(unique(df["Well.Position"]))
df.result <- data.frame(well = character(),
efficiency=double(),
rsq=double(),
stringsAsFactors=FALSE)
for(i in unique.wells){
tryCatch(
expr = {
df.transitory <- subset.data.frame(df, df$Well.Position == i)
#plot(df.transitory$Cycle.Number, df.transitory$X1_M1, main="Scatterplot Example",
#     xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
pcr.obj <- pcrfit(df.transitory , cyc = 3, fluo = 4)
result <- sliwin(pcr.obj, wsize = 5:7, basecyc = 1:6, base = 0, border = NULL,
type = c("rsq", "slope"))
new.row <- list(well = i, efficiency=result$eff, rsq=result$rsq)
df.result = rbind(df.result,new.row, stringsAsFactors=FALSE)
},
error = function(e){
# (Optional)
# Do this if an error is caught...
},
warning = function(w){
# (Optional)
# Do this if an warning is caught...
},
finally = {
# (Optional)
# Do this at the end before quitting the tryCatch structure...
}
)
}
# Change columns names to probes.
# 1. import result csv toe xtract targets.
results_to_merge <- read_csv(mergefile, skip = 22)
results_to_merge <- results_to_merge[,c("Well Position","Target")]
output <- merge.data.frame(x = df.result , y = results_to_merge , by.x = "well" , by.y = "Well Position" )
write.csv(output, "n37_efficiency.csv" , sep = ",")
